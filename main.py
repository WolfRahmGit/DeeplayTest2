import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import SpectralClustering
from sklearn.manifold import TSNE


# ----------------------------------------------------------------------
# Литвинов Илья. Тестовое задание №2.
#
# В рамках поставленной задачи целью является выделение группы игроков,
#   с общим стилем игры, отличным от общей массы. Для решения этой задачи
#   я реализовал кластеризацию игроков а так же визуализировал результат.
# ----------------------------------------------------------------------

# Достаём данные из таблицы, исключаем пустые столбцы из фрейма.
data = pd.read_excel('data.xlsx', sheet_name='Player_Groups')
data = data.dropna(axis=1)

# Получаем данные из фрейма и нормализуем.
clus_dataSet = data.values[:, 1:]
clus_dataSet = StandardScaler().fit_transform(clus_dataSet)

# Переменная для регулирования количества кластеров.
# Так как нам необходимо обнаружить группу выделяющихся игроков, предполагается,
# что уместно разбить их на два кластера: обычные и необычные.
# Последующая визуализация показала, что два кластера - оптимальный вариант.
cluster_num = 2

# Исходя из условия, ожидается, что группа выделяющихся игроков должна иметь
# значительно меньший размер по сравнению с основной. В таком случае алгоритм
# спектральной кластеризации подойдет наилучшим образом.
# Получаем результат кластеризации и записываем в фрейм. Теперь при выводе таблицы
# мы уже имеем соответствие игрок-группа.
#
# Я эксперементировал с параметром assign_labels, изначально я выставил его как cluster_qr,
# но в этом случае один игрок из основной массы начинает несправедливо относиться к необычным
# игрокам (Это заметно на графике).
# В итоге результат без погрешностей был достигнут при стандарном значении параметра - kmeans.
sc = SpectralClustering(n_clusters=cluster_num, affinity='nearest_neighbors', assign_labels='kmeans')
sc.fit(clus_dataSet)
labels = sc.labels_
data['groupNum'] = labels

# Если вывести список лейблов, видно, что как и было задумано, основная часть игроков объединилась в один кластер,
# а небольшая часть в другой. Видимо, искомая группа найдена. Чтобы убедиться, визуализируем результат.
# Для этого я использовал алгоритм t-SNE.
# Стандартная параплексия меня устроила, а с вынесенными параметрами я поэксперементировал но так же не стал
# отклоняться от стандартных значений.
embedded = TSNE(n_components=2, learning_rate='auto', init='random', random_state=2).fit_transform(clus_dataSet)

data['X'] = embedded[:, 0]
data['Y'] = embedded[:, 1]


def colors(row, column):
    """Покраска точек на графике в соответствии с кластером"""
    if row[column] == 0:
        return 'Red'
    if row[column] == 1:
        return 'Blue'


# Покраска точек и рисование графика
data["Color"] = data.apply(colors, axis=1, column='groupNum')

plt.scatter(data['X'], data['Y'], s=2, c=list(data['Color']))
plt.show()

# Компановка фрейма, который является ответом на задание.
result = pd.DataFrame()
result['groupNum'] = data['groupNum']
result['player'] = data['player']

print(result)

# Profit!
